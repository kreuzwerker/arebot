ec2_policy "myECpolicy" { // compliance policy on EC2 resources
  api_call "RunInstances" { // monitor the API Calls that create new EC2 instances
    compliant "Tag.ProjectName" { // compliance rule: tagging requirement
      schema = "^Proj-[0-9][0-9][0-9]$" // e.g., "Proj-007" is a compliant project name
      mandatory = true // all instances must have this tag
      actions = [ "notify_admins" ] // actions to trigger if not-compliant
    }
  }
  api_call "CreateTags" { // monitor the API Calls that create new EC2 instances
    compliant "Tag.ProjectName" { // compliance rule: tagging requirement
      schema = "^Proj-[0-9][0-9][0-9]$" // e.g., "Proj-007" is a compliant project name
      mandatory = true // all instances must have this tag
      actions = [ "notify_admins" ] // actions to trigger if not-compliant
    }
  }
  api_call "CreateVolume" { // monitor the API Calls that create new EBS volumes
    compliant "Tag.ProjectName" { // 1st compliance rule: tagging requirement
      schema = "^Proj-[0-9][0-9][0-9]$"
      mandatory = true
      actions = [ "notify_admins" ]
    }
    compliant "Encrypted" { // 2nd compliance rule: encryption requirement
      schema = "true"
      actions = [ "notify_admins" ]
    }
  }

  action "notify_admins" { // the action associated with the compliance rules
    email {
      receiver  = [ "guido.lenacota@gmail.com" ]
    }
    condition "stop_reminders" {
      type = "stop_after"
      value = "10 days"
    }
  }

  action_trigger "CheckEveryMorning" { // trigger periodic compliance checks
    schedule = "0 */2 * * * *" // cron like syntax - every day at 08:00
    action = [ "notify_admins" ]
  }
}


security_group_policy "mySGpolicy" { // compliance policy on Security Groups
  api_call "CreateSecurityGroup" { // monitor the API Calls that create new Security Groups
    compliant "Tag.ProjectName" { // compliance rule: tagging requirement
      schema = "^Proj-[0-9][0-9][0-9]$"
      mandatory = true
      actions = [ "notify_admins" ]
    }
  }

  api_call "CreateTags" { // monitor the API Calls that create new Security Groups
    compliant "Tag.ProjectName" { // compliance rule: tagging requirement
      schema = "^Proj-[0-9][0-9][0-9]$"
      mandatory = true
      actions = [ "notify_admins" ]
    }
    compliant "Tag.Name" { // compliance rule: tagging requirement
      schema = "^Tag.*"
      actions = [ "notify_admins" ]
    }
  }

  action "notify_admins" { // the action associated with the compliance rule
    email { receiver  = [ "guido.lenacota@gmail.com" ] }
  }
}

account "test-account" { // the monitored AWS account
  account_id = "000000000000"
  region = "eu-west-1"
  arebot_role_arn = "arn:aws:iam::000000000000:role/AreBot" // the IAM role that gives the permissions to AreBOT to work
  all_events_queue = "AreBotEventQueue" // the SQS queue where all the CloudWatch events about resource activities are delivered
}

/*
account "second-account" { // the second account to monitor.. other accounts can be added in the same way
  account_id = "000000000001"
  region = "eu-west-2"
  arebot_role_arn = "arn:aws:iam::000000000001:role/AreBot"
  all_events_queue = "AreBotEventQueue"
}
*/

ses_config {
  region = "eu-west-1"
  arebot_role_arn = "arn:aws:iam::000000000000:role/AreBot"
  sender_address = "sender.address@arebot.net"
  message_topic = "[AWS {{State.Operator}}] Compliance problem(s) detected - {{Region}}."
  message_body = "Compliance problem(s) detected."
}

s3_config {
   region = "eu-west-1"
   bucket = ""
   local_folder = ".checkresult_states"
   arebot_role_arn = "arn:aws:iam::000000000000:role/AreBot"
}

/* uncomment to store compliance results on dynamodb, if the resource has been provisioned
dynamodb_config {
  region = "eu-west-1"
  arebot_role_arn = "arn:aws:iam::000000000000:role/AreBot"
}
*/
